{
  "Background": {
    "color": -3032582,
    "penabled": false,
    "id": 2,
    "cenabled": false,
    "custom": ""
  },
  "Shader": {
    "id": 0,
    "enabled": true,
    "custom": "#ifdef GL_ES\r\nprecision mediump float;\r\n#endif\r\n \r\nuniform float time;\r\nuniform vec2 mouse;\r\nuniform vec2 resolution;\r\n\r\n#define iterations 10\r\n#define formuparam2 0.79\r\n \r\n#define volsteps 5\r\n#define stepsize 0.290\r\n \r\n#define zoom 0.800\r\n#define tile   0.850\r\n#define speed2  0.10\r\n\r\n#define brightness 0.002\r\n#define darkmatter 0.500\r\n#define distfading 0.560\r\n#define saturation 0.700\r\n\r\n#define transverseSpeed zoom*0.1\r\n#define cloud 0.01\r\n \r\nfloat triangle(float x, float a) { \r\n\tfloat output2 = 2.0*abs(  2.0*  ( (x/a) - floor( (x/a) + 0.5) ) ) - 1.0;\r\n\treturn output2;\r\n}\r\n \r\nfloat field(in vec3 p) {\t\r\n\tfloat strength = 7. + .03 * log(1.e-6 + fract(sin(time) * 4373.11));\r\n\tfloat accum = 0.;\r\n\tfloat prev = 0.;\r\n\tfloat tw = 0.;\t\r\n\r\n\tfor (int i = 0; i < 6; ++i) {\r\n\t\tfloat mag = dot(p, p);\r\n\t\tp = abs(p) / mag + vec3(-.5, -.8 + 0.1*sin(time*0.7 + 2.0), -1.1+0.3*cos(time*0.3));\r\n\t\tfloat w = exp(-float(i) / 7.);\r\n\t\taccum += w * exp(-strength * pow(abs(mag - prev), 2.3));\r\n\t\ttw += w;\r\n\t\tprev = mag;\r\n\t}\r\n\treturn max(0., 5. * accum / tw - .7);\r\n}\r\n\r\nvoid main() {   \r\n     \tvec2 uv2 = 2. * gl_FragCoord.xy / vec2(512) - 1.;\r\n\tvec2 uvs = uv2 * vec2(512)  / 512.;\r\n\t\r\n\tfloat time2 = time;               \r\n        float speed = speed2;\r\n        speed = .01 * cos(time2*0.02 + 3.1415926/4.0);          \r\n\t//speed = 0.0;\t\r\n    \tfloat formuparam = formuparam2;\r\n\t\r\n    \t//get coords and direction\t\r\n\tvec2 uv = uvs;\t\t       \r\n\t//mouse rotation\r\n\tfloat a_xz = 0.9;\r\n\tfloat a_yz = -.6;\r\n\tfloat a_xy = 0.9 + time*0.08;\t\r\n\t\r\n\tmat2 rot_xz = mat2(cos(a_xz),sin(a_xz),-sin(a_xz),cos(a_xz));\t\r\n\tmat2 rot_yz = mat2(cos(a_yz),sin(a_yz),-sin(a_yz),cos(a_yz));\t\t\r\n\tmat2 rot_xy = mat2(cos(a_xy),sin(a_xy),-sin(a_xy),cos(a_xy));\r\n\t\r\n\r\n\tfloat v2 =1.0;\t\r\n\tvec3 dir=vec3(uv*zoom,1.); \r\n\tvec3 from=vec3(0.0, 0.0,0.0);                               \r\n        from.x -= 5.0*(1.0-1.0);\r\n        from.y -= 5.0*(1.0-0.7);\r\n               \r\n               \r\n\tvec3 forward = vec3(0.,0.,1.);   \r\n\tfrom.x += transverseSpeed*(1.0)*cos(0.01*time) + 0.001*time;\r\n\tfrom.y += transverseSpeed*(1.0)*sin(0.01*time) +0.001*time;\r\n\tfrom.z += 0.003*time;\t\r\n\t\r\n\tdir.xy*=rot_xy;\r\n\tforward.xy *= rot_xy;\r\n\tdir.xz*=rot_xz;\r\n\tforward.xz *= rot_xz;\t\r\n\tdir.yz*= rot_yz;\r\n\tforward.yz *= rot_yz;\r\n\t\r\n\tfrom.xy*=-rot_xy;\r\n\tfrom.xz*=rot_xz;\r\n\tfrom.yz*= rot_yz;\r\n\t \r\n\t\r\n\t//zoom\r\n\tfloat zooom = (time2-3311.)*speed;\r\n\tfrom += forward* zooom;\r\n\tfloat sampleShift = mod( zooom, stepsize );\r\n\t \r\n\tfloat zoffset = -sampleShift;\r\n\tsampleShift /= stepsize; // make from 0 to 1\r\n\t\r\n\t//volumetric rendering\r\n\tfloat s=0.24;\r\n\tfloat s3 = s + stepsize/2.0;\r\n\tvec3 v=vec3(0.);\r\n\tfloat t3 = 0.0;\t\r\n\t\r\n\tvec3 backCol2 = vec3(0.);\r\n\tfor (int r=0; r<volsteps; r++) {\r\n\t\tvec3 p2=from+(s+zoffset)*dir;// + vec3(0.,0.,zoffset);\r\n\t\tvec3 p3=from+(s3+zoffset)*dir;// + vec3(0.,0.,zoffset);\r\n\t\t\r\n\t\tp2 = abs(vec3(tile)-mod(p2,vec3(tile*2.))); // tiling fold\r\n\t\tp3 = abs(vec3(tile)-mod(p3,vec3(tile*2.))); // tiling fold\t\t\r\n\t\t#ifdef cloud\r\n\t\tt3 = field(p3);\r\n\t\t#endif\r\n\t\t\r\n\t\tfloat pa,a=pa=0.;\r\n\t\tfor (int i=0; i<iterations; i++) {\r\n\t\t\tp2=abs(p2)/dot(p2,p2)-formuparam; // the magic formula\r\n\t\t\t//p=abs(p)/max(dot(p,p),0.005)-formuparam; // another interesting way to reduce noise\r\n\t\t\tfloat D = abs(length(p2)-pa); // absolute sum of average change\r\n\t\t\ta += i > 7 ? min( 12., D) : D;\r\n\t\t\tpa=length(p2);\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t//float dm=max(0.,darkmatter-a*a*.001); //dark matter\r\n\t\ta*=a*a; // add contrast\r\n\t\t//if (r>3) fade*=1.-dm; // dark matter, don't render near\r\n\t\t// brightens stuff up a bit\r\n\t\tfloat s1 = s+zoffset;\r\n\t\t// need closed form expression for this, now that we shift samples\r\n\t\tfloat fade = pow(distfading,max(0.,float(r)-sampleShift));\t\t\r\n\t\t//t3 += fade;\t\t\r\n\t\tv+=fade;\r\n\t       \t//backCol2 -= fade;\r\n\r\n\t\t// fade out samples as they approach the camera\r\n\t\tif( r == 0 )\r\n\t\t\tfade *= (1. - (sampleShift));\r\n\t\t// fade in samples as they approach from the distance\r\n\t\tif( r == volsteps-1 )\r\n\t\t\tfade *= sampleShift;\r\n\t\tv+=vec3(s1,s1*s1,s1*s1*s1*s1)*a*brightness*fade; // coloring based on distance\r\n\t\t\r\n\t\tbackCol2 += mix(.4, 1., v2) * vec3(1.8 * t3 * t3 * t3, 1.4 * t3 * t3, t3) * fade;\r\n\r\n\t\t\r\n\t\ts+=stepsize;\r\n\t\ts3 += stepsize;\t\t\r\n\t}\r\n\t\t       \r\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\t\r\n\r\n\tvec4 forCol2 = vec4(v*.01,1.);\t\r\n\t#ifdef cloud\r\n\tbackCol2 *= cloud;\r\n\t#endif\t\r\n\tbackCol2.b *= -3.8;\r\n\tbackCol2.r *= 0.05;\t\r\n\t\r\n\tbackCol2.b = 1.5*mix(backCol2.g, backCol2.b, 0.1);\r\n\tbackCol2.g = -0.;\r\n\tbackCol2.bg = mix(backCol2.gb, backCol2.bg, 0.39*(cos(1.00) + 1.0));\t\r\n\tgl_FragColor = forCol2 + vec4(backCol2, 1.0);\r\n}"
  }
}